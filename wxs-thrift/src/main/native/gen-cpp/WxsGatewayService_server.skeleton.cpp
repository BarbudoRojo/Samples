// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "WxsGatewayService.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class WxsGatewayServiceHandler : virtual public WxsGatewayServiceIf {
 public:
  WxsGatewayServiceHandler() {
    // Your initialization goes here
  }

  void get(std::string& _return, const std::string& mapName, const std::string& key) {
    // Your implementation goes here
    printf("get\n");
  }

  void remove(const std::string& mapName, const std::string& key) {
    // Your implementation goes here
    printf("remove\n");
  }

  void put(const std::string& mapName, const std::string& key, const std::string& value) {
    // Your implementation goes here
    printf("put\n");
  }

  void getAll(std::vector<std::string> & _return, const std::string& mapName, const std::vector<std::string> & keyList) {
    // Your implementation goes here
    printf("getAll\n");
  }

  void removeAll(const std::string& mapName, const std::vector<std::string> & keyList) {
    // Your implementation goes here
    printf("removeAll\n");
  }

  void putAll(const std::string& mapName, const std::vector<std::string> & keys, const std::vector<std::string> & values) {
    // Your implementation goes here
    printf("putAll\n");
  }

};

/*
int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<WxsGatewayServiceHandler> handler(new WxsGatewayServiceHandler());
  shared_ptr<TProcessor> processor(new WxsGatewayServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

*/
